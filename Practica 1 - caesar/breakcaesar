#!/usr/bin/env python3
import argparse
import sys
import utils
from collections import Counter
import math

def euclidean(x,y):
    dist = math.sqrt((x-y)**2)
    return dist

# Reads 'echo' input and changes to upper case
plaintext = sys.stdin.read()
text = plaintext.upper()
text = list(text)

# Auxiliar lists and variables
ciphers = []
alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
text_freq = []
distance = []
all_dist = []
idx = []
bigrams = ['TH', 'HE', 'IN', 'EN', 'NT', 'RE', 'ER', 'AN', 'TI', 'ES', 'ON', 'AT', 'SE', 'ND', 'OR', 'AR', 'AL', 'TE', 'CO', 'DE', 'TO', 'RA', 'ET', 'ED', 'IT', 'SA', 'EM', 'RO']
bi = []
trigrams = ['THE', 'AND', 'THA', 'ENT', 'ING', 'ION', 'TIO', 'FOR', 'NDE', 'HAS', 'NCE', 'EDT', 'TIS', 'OFT', 'STH', 'MEN']
tri = []
count = 0
spaces = 0
resbi = []
restri = []

# Letter frequency in english
freq = [8.2, 1.5, 2.8, 4.3, 13, 2.2, 2, 6.1, 7, 0.15, 0.77, 4, 2.4, 6.7, 7.5, 1.9, 0.095, 6, 6.3, 9.1, 2.8, 0.98, 2.4, 0.15, 2, 0.074]

# Brute force decryption
for i in range(0,26):
    j = 26 - i
    utils.dictionary(j)
    ciphers.append(utils.caesar_encrypt(text,j))

for sentence in ciphers:
    # Eliminate spaces
    spaces = sentence.count(' ')
    # Frequency of letters in text
    l = len(sentence) - spaces
    for letter in alphabet:
        text_freq.append( (sentence.count(letter)/l) * 100)
    # Euclidean distance between Real frequency and Frequency in text
    for i in range(len(text_freq)):
        distance.append(euclidean(freq[i],text_freq[i]))
    all_dist.append(sum(distance))
    text_freq = []
    distance = []

for j in range(3):
    # List of 3 sentences with least distance (more similar to real frequency)
    mx = all_dist.index(min(all_dist))
    idx.append(mx)
    all_dist.remove(all_dist[mx])
    # Count common bigrams
    for m in range(len(bigrams)):
        bi.append(ciphers[idx[j]].count(bigrams[m]))
    resbi.append(sum(bi))
    bi = []
    # Count common trigrams
    for o in range(len(trigrams)):
        tri.append(ciphers[idx[j]].count(trigrams[o]))
    restri.append(sum(tri))
    tri = []
    # If sentence with least euclidean distance also has the most bigrams and trigrams, we have our answer
    if restri.index(max(restri)) == resbi.index(max(resbi)):
        print(str(idx[j]),':',ciphers[idx[j]])
        break