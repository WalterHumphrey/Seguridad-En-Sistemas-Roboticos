#!/usr/bin/env python3
import argparse
import sys
import utils
from collections import Counter
import math

def euclidean(x,y):
    dist = math.sqrt((x-y)**2)
    return dist

# Reads 'echo' input and changes to upper case
plaintext = sys.stdin.read()
text = plaintext.upper()
text = list(text)

ciphers = []
alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
text_freq = []
distance = []
all_dist = []
idx = []


# Letter frequency in english
freq = [8.2, 1.5, 2.8, 4.3, 13, 2.2, 2, 6.1, 7, 0.15, 0.77, 4, 2.4, 6.7, 7.5, 1.9, 0.095, 6, 6.3, 9.1, 2.8, 0.98, 2.4, 0.15, 2, 0.074]

# Brute force decryption
for i in range(0,26):
    j = 26 - i
    utils.dictionary(j)
    ciphers.append(utils.caesar_encrypt(text,j))

count = 0
spaces = 0

for sentence in ciphers:
    # Eliminate spaces
    spaces = sentence.count(' ')
    # Frequency of letters in text
    l = len(sentence) - spaces
    for letter in alphabet:
        text_freq.append( (sentence.count(letter)/l) * 100)
    # Euclidean distance between Real frequency and Frequency in text
    for i in range(len(text_freq)):
        distance.append(euclidean(freq[i],text_freq[i]))
    all_dist.append(sum(distance))
    text_freq = []
    distance = []

# List of 3 sentences with leas distance (more similar to real frequency)
for j in range(3):
    mx = all_dist.index(min(all_dist))
    idx.append(mx)
    all_dist.remove(all_dist[mx])
for n in range(3):
   print(ciphers[idx[n]])
